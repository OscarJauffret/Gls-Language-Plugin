{
  parserClass="com.gls.glsplugin.language.parser.GillesParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Gilles"
  psiImplClassSuffix="Impl"
  psiPackage="com.gls.glsplugin.language.psi"
  psiImplPackage="com.gls.glsplugin.language.psi.impl"

  elementTypeHolderClass="com.gls.glsplugin.language.psi.GillesTypes"
  elementTypeClass="com.gls.glsplugin.language.psi.GillesElementType"
  tokenTypeClass="com.gls.glsplugin.language.psi.GillesTokenType"

  psiImplUtilClass="com.gls.glsplugin.language.psi.impl.GillesPsiImplUtil"

}

gilles_file ::= program?

program ::= LET PROGNAME BE code? END
code ::= (instruction COLON)* {
    pin=2
    recoverWhile="recover_code"
}
private recover_code ::= !(ELSE|END)

instruction ::= assign_block | if_block | while_block | for_block | output | input

assign_block ::= VARNAME ASSIGN expr_arith {
    pin=2
    mixin="com.gls.glsplugin.language.psi.impl.GillesNamedElementImpl"
    implements="com.gls.glsplugin.language.psi.GillesNamedElement"
    methods=[getKey getValue getName setName getNameIdentifier]
}

expr_arith ::= prod expr_arith_tail
expr_arith_tail ::= (PLUS prod expr_arith_tail | MINUS prod expr_arith_tail)?
prod ::= factor prod_tail
prod_tail ::= (TIMES factor prod_tail | DIVIDE factor prod_tail | MODULO factor prod_tail)?
factor ::= MINUS factor | atom
atom ::= VARNAME | NUMBER | LPAREN expr_arith RPAREN

if_block ::= IF LBRACK cond RBRACK THEN code if_tail
if_tail ::= ELSE code END | END

cond ::= final_cond cond_tail
cond_tail ::= (IMPLIES cond)?
final_cond ::= PIPE cond PIPE | expr_arith comp expr_arith

comp ::= EQUAL | NEQUAL | SMALEQ | SMALLER | BIGEQ | BIGGER
while_block ::= WHILE LBRACK cond RBRACK REPEAT code END
for_block ::= FOR assign_block TO expr_arith REPEAT code END
output ::= OUT LPAREN VARNAME RPAREN
input ::= IN LPAREN VARNAME RPAREN

